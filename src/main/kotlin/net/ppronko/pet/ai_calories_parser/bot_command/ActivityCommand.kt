package net.ppronko.pet.ai_calories_parser.bot_command

import net.ppronko.pet.ai_calories_parser.data.BotCommandConstants
import net.ppronko.pet.ai_calories_parser.pattern.Command
import net.ppronko.pet.ai_calories_parser.service.UserProfileService
import net.ppronko.pet.ai_calories_parser.service.UserService
import org.springframework.stereotype.Component
import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.objects.Update
import org.telegram.telegrambots.meta.bots.AbsSender

@Component
class ActivityCommand(
    private val userService: UserService,
    private val userProfileService: UserProfileService
) : Command {
    override fun getCommandName(): String = BotCommandConstants.ACTIVITY.command

    override fun execute(update: Update, sender: AbsSender) {
        val chatId = update.message.chatId
        val description = update.message.text.removePrefix(getCommandName()).trim()

        if (description.isBlank()) {
            val response = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å—Ä–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø—Ä–∏–º–µ—Ä:\n`/activity –¢—Ä–∏ —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é —Ö–æ–∂—É –≤ –∑–∞–ª, –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.`"
            sender.execute(SendMessage(chatId.toString(), response))
            return
        }

        val sentMessage = sender.execute(SendMessage(chatId.toString(), "üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å..."))

        try {
            val user = userService.getUser(chatId)
            val updatedProfile = userProfileService.updateUserActivity(user, description)
            val responseText = "‚úÖ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω! –ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è, –≤–∞—à –Ω–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: *${"%.2f".format(updatedProfile.activityCoefficient)}*.\n\n–¶–µ–ª–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º."

            sender.execute(SendMessage(chatId.toString(), responseText).apply { parseMode = "Markdown" })
        } catch (e: Exception) {
            val errorMessage = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            sender.execute(SendMessage(chatId.toString(), errorMessage))
        } finally {
            // –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...", –Ω–æ —ç—Ç–æ —É—Å–ª–æ–∂–Ω–∏—Ç –∫–æ–¥, –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
        }
    }
}