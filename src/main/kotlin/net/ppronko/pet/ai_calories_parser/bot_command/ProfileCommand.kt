package net.ppronko.pet.ai_calories_parser.bot_command

import net.ppronko.pet.ai_calories_parser.data.BotCommandConstants
import net.ppronko.pet.ai_calories_parser.data.MacroGoals
import net.ppronko.pet.ai_calories_parser.data.entity.TelegramUserProfile
import net.ppronko.pet.ai_calories_parser.menu.ProfileKeyboard
import net.ppronko.pet.ai_calories_parser.pattern.Command
import net.ppronko.pet.ai_calories_parser.service.MealService
import net.ppronko.pet.ai_calories_parser.service.UserProfileService
import net.ppronko.pet.ai_calories_parser.service.UserService
import net.ppronko.pet.ai_calories_parser.util.MarkdownV2Escaper
import org.slf4j.LoggerFactory
import org.springframework.stereotype.Component
import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.objects.Update
import org.telegram.telegrambots.meta.bots.AbsSender

@Component
class ProfileCommand(
    private val userProfileService: UserProfileService,
    private val userService: UserService,
    private val mealService: MealService
) : Command {
    private val logger = LoggerFactory.getLogger(javaClass)

    override fun getCommandName(): String = BotCommandConstants.PROFILE.command

    override fun execute(update: Update, sender: AbsSender) {
        val chatId = update.message.chatId
        val user = userService.getOrCreateUser(update.message.from)
        logger.info("Processing /profile command for chatId {}", chatId)

        val profile = userProfileService.getProfile(chatId)

        if (!profile.isConfigured) {
            val setupText = "üëã –ü–æ—Ö–æ–∂–µ, –≤—ã –∑–¥–µ—Å—å –≤–ø–µ—Ä–≤—ã–µ! –î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã —Ä–∞—Å—á–µ—Ç—ã –±—ã–ª–∏ —Ç–æ—á–Ω—ã–º–∏.\n\n" +
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ."

            val message = SendMessage(chatId.toString(), setupText).apply {
                replyMarkup = ProfileKeyboard.create(profile)
            }
            sender.execute(message)

        } else {
            val currentGoals = mealService.getGoalForToday(user)
            val calculatedGoals = userProfileService.getCalculatedGoals(user)

            val responseText = formatProfile(profile, currentGoals, calculatedGoals)

            val message = SendMessage(chatId.toString(), responseText).apply {
                replyMarkup = ProfileKeyboard.create(profile)
                parseMode = "Markdown"
            }
            sender.execute(message)
        }
    }

    fun formatProfile(profile: TelegramUserProfile, currentGoals: MacroGoals, calculatedGoals: MacroGoals): String {
        val mode = if (profile.areGoalsAutomatic) "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π" else "–†—É—á–Ω–æ–π"
        val activity = MarkdownV2Escaper.escape(profile.activityDescription)

        val currentGoalsText = "üî• *${currentGoals.calories} –∫–∫–∞–ª* | üí™ *${currentGoals.protein}–≥* | ü•ë *${currentGoals.fats}–≥* | üçû *${currentGoals.carbs}–≥*"
        val calculatedGoalsText = "üî• ${calculatedGoals.calories} –∫–∫–∞–ª | üí™ ${calculatedGoals.protein}–≥ | ü•ë ${calculatedGoals.fats}–≥ | üçû ${calculatedGoals.carbs}–≥"

        return """
            *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å* üë§
            - –í–µ—Å: ${profile.weight} –∫–≥, –†–æ—Å—Ç: ${profile.height} —Å–º, –í–æ–∑—Ä–∞—Å—Ç: ${profile.age}
            - –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: `$activity`
            
            *–¢–µ–∫—É—â–∏–µ —Ü–µ–ª–∏ (–†–µ–∂–∏–º: $mode)*
            $currentGoalsText
            
            *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ü–µ–ª–∏ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è):*
            `$calculatedGoalsText`
        """.trimIndent()
    }
}